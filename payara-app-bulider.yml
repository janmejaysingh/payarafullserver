apiVersion: v1
kind: Template
metadata:
  name: payara-full-server
  annotations:
    openshift.io/display-name: Payara full serever
    description: Runs sample.war.
    iconClass: icon-infinispan
labels:
  template: payara-full-server
  component: payara-full-server
parameters:
- name: NAME
  displayName: Instance name
  value: payara-full-server
  description: The name of the instance. The name will be used for the stateful set, the service and the config map.
  required: true
- name: REPLICAS
  displayName: Number of replicas
  value: '3'
  description: The initial number of replicas.
  required: true
- name: MEMORY
  displayName: Memory
  value: 1G
  description: The amount of memory to request for each pod (values must be specified as M or G).
  required: true
- name: CPU
  displayName: CPU
  value: 500m
  description: The amount of CPU to request for each pod.
  required: true
- name: IMAGE_NAME
  displayName: Docker image name
  description: The name of the Docker image to instantiate.
  value: payara
  required: true
- name: DOCKER_REGISTRY
  displayName: Docker registry
  description: The Docker registry address.
  value: docker-registry.default.svc:5000
  required: true
- name: NAMESPACE
  displayName: Namespace
  description: The namespace the Docker image is located in.
  value: myproject
  required: true
- name: VERSION
  displayName: Docker image version
  description: The version of the Docker image.
  value: latest
  required: true
- name: ROUTE1
  displayName: Instance name
  value: payara-8080
  description: This is the route for the 8080.
  required: true
- name: ROUTE2
  displayName: Instance name
  value: payara-4848
  description:This is the route for the 4848.
  required: true
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}-service
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: ${NAME}-os-certs
    labels:
      app: ${NAME}
  spec:
    ports:
    - port: 8080
      name: application-internal
    - port: 8181
      name: application-external
    - port: 4848
      name: admin
    clusterIP: None
    selector:
      app: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}-service
    labels:
      app: ${NAME}
  spec:
    to:
      kind: Service
      name: ${NAME}-service
    port:
      targetPort: application-external
    tls:
      termination: passthrough
- apiVersion: v1
  kind: Route
  metadata:
    name: ${ROUTE1}-service
    labels:ROUTE1
      app: ${}
  spec:
    to:
      kind: Service
      name: ${ROUTE1}-service
    port:
      targetPort: application-internal
    tls:
      termination: passthrough
- apiVersion: v1
  kind: Route
  metadata:
    name: ${ROUTE2}-service
    labels:
      app: ${ROUTE2}
  spec:
    to:
      kind: Service
      name: ${ROUTE2}-service
    port:
      targetPort: admin
    tls:
      termination: passthrough
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: ${NAME}
  name: ${NAME}
  namespace: ${NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${NAME}
  serviceName: ${NAME}
  template:
    metadata:
      labels:
        app: ${NAME}
    spec:
      containers:
        - name: ${NAME}
          imagePullPolicy: Always
          image: ${DOCKER_REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:${VERSION}
          command: ["/bin/sh", "-ec", "while :; do echo '.'; sleep 5 ; done"]
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30